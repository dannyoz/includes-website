// =========================================================================================================================
// @includes - Layout mixins
// masonry | sidebars | helpers
// ------------------------------------------------------

@charset "utf-8";
@import "variables.include";
@import "utils.include";

/// Modern masonry css layout. Uses *column-count to arange content 
/// This mixin can be used with the @include cardClass; mixin
/// to create "Pinterest" style layouts. Html5 browser support only.
/// See caniuse for more info on column-count browser support.
/// @link http://caniuse.com/#search=flexbox Browser support for column-count
/// @see cardClass
/// @name masonryClasses
/// @param {Integer} ammount [4] Amount of masonry columns
/// @param {Pixel/em value} gutter-width [1em] Width between and below masonry items
/// @param {Integer} padding [0] Padding in pixels
/// @param {Integer} rounding [0] Rounding in pixels
/// @example scss - Include
///  @include masonryClasses(4);
///
/// @example css - Output
///  .masonry {
///  	-moz-column-count: 4;
///  	-webkit-column-count: 4;
///  	column-count: 4;
///  	margin: 1em 0;
///  	-moz-column-gap: 1em;
///  	-webkit-column-gap: 1em;
///  	column-gap: 1em;
///  }
///  
///  .masonry .masonry-item {
///    	display: inline-block;
///    	margin: 0 0 1em;
///    	width: 100%;
///    	overflow: hidden;
///    	border-radius: 5;
///  }
///  .masonry .masonry-item img {
///    		display: block;
///    		width: 100%;
///  }
///  
///


@mixin masonryClasses($col-count:4,$gutter-width:1em,$padding:0,$rounding:5) {

	$vendors : "-webkit-" "-moz-" "";

	.masonry{

		margin: $gutter-width 0;

		@each $vendor in $vendors {

			#{$vendor}column-count : $col-count;
			#{$vendor}column-gap : $gutter-width;

		}

		.masonry-item{

			display: inline-block;
			margin: 0 0 $gutter-width;
			width: 100%;
			overflow: hidden;

			@if $padding > 0{

				padding:#{$padding}px;
			}

			@if $rounding > 0{

				border-radius:#{$rounding}px;
			}

			img{

				display: block;
				width: 100%;
			}
		}

	}
}


// ------------------------------------------------------

/// Adds a .container class
/// @name containerClass
/// @param {Pixel value} maxWidth [1024px] The maximum width of the container
/// @param {Integer} padding [20] Padding left & right in pixels
/// @example scss - Include
///  @include containerClass(1024px,30)
///
/// @example css - Output
///  .container {
///      	margin: 0 auto;
///      	max-width: 1024px;
///      	padding: 0 30px;
///  }
///

@mixin containerClass($maxWidth:1024px,$padding:20){

	.container{

		margin: 0 auto;
		max-width: $maxWidth;
		
		@if $padding > 0{
			padding:0 #{$padding}px;
		}
	}
}

// ------------------------------------------------------

/// Add stackable sections
/// @name stackClass
/// @param {Integer} padding [20] Padding top & bottom in pixels
/// @example scss - Include
///  @include stackClass(20)
///
/// @example css - Output
///  .stack {
///    padding: 20px 0;
///    min-height: 1%;
///  }
///  .stack:after {
///    content: "";
///    display: table;
///    clear: both;
///  }
///

@mixin stackClass($padding:40){
	
	.stack{

		@if $padding > 0{
			padding:#{$padding}px 0 ;
		}
		
		min-height: 1%;

		&:after {
	        content: "";
	        display: table;
	        clear: both;
	    }
	}
}

// ------------------------------------------------------

/// Theming stackable sections
/// @name themeStack
/// @param {#hex/rgba} themeColour [] The base theme colour
/// @example scss - Include
///  @include stackClass(20);
///  @include themeStack(#e9e9e9);
///
/// @example css - Output
///  .stack {
///    padding: 20px 0;
///    min-height: 1%;
///  }
///  .stack:after {
///    content: "";
///    display: table;
///    clear: both;
///  }
///  .stack {
///    display: block;
///    background-color: #e9e9e9;
///    border-bottom: 1px solid #d7d7d7;
///  }
///  .stack:nth-child(even) {
///    background-color: #e4e4e4;
///  }
///


@mixin themeStack($themeColour){

	.stack{

		display: block;
		background-color:$themeColour;
		border-bottom:1px  solid darken($themeColour,7%);

		&:nth-child(even){

			background-color: darken($themeColour,2%);
		}

	}

}

// ------------------------------------------------------

/// Nested include to apply full screen styles to a selector. 
/// Uses the vh css property see caniuse for more information
/// @link http://caniuse.com/#search=vh Browser support info for vh property
/// @name fullScreen
/// @example scss - Include
///  section#intro {
///  	@include fullScreen;
///  }
///
/// @example css - Output
///  section#intro {
///    position: relative;
///    width: 100%;
///    height: 100vh;
///  }
///

@mixin fullScreen{

	position: relative;
	width:100%;
	height:100vh;
}

// ------------------------------------------------------

/// Generates a .fullscreen class for creaing full screen elements. 
/// Uses the vh css property see caniuse for more information
/// @link http://caniuse.com/#search=vh Browser support info for vh property
/// @name fullScreenClass
/// @example scss - Include
///  @include fullScreenClass;
///
/// @example css - Output
///  .fullscreen {
///    position: relative;
///    width: 100%;
///    height: 100vh;
///  }
///

@mixin fullScreenClass{

	.fullscreen{
		position: relative;
		width:100%;
		height:100vh;
	}
}

// ------------------------------------------------------

/// Apply sticky header styles to a selector with this mixin.
/// Arguments allow you to specify the height of the header and css positioning.
/// @name stickyHeader
/// @param {Pixel value} height [50px] Height of the header
/// @param {String} position ['fixed'] Positioning property. 'fixed' | 'absolute'
/// @example scss - Include
///  header.sticky{
///  
///  	@include stickyHeader(60px);
///  }
/// @example css - Output
///  header.sticky {
///    position: fixed;
///    top: 0;
///    height: 60px;
///    width: 100%;
///    z-index: 9999;
///  }
///

@mixin stickyHeader($height:50px,$position:fixed){
	
	position: $position;
	top:0;
	height:$height;
	width:100%;
	z-index: 9999;
}

@mixin stickyHeaderClass($height:50px,$position:fixed){

	header.sticky{

		position: $position;
		top:0;
		height:$height;
		width:100%;
		z-index: 9999;
	}
	
}

@mixin paddedClass($ammount:20px){

	.padded{

		padding: $ammount;

		h1,h2,h3,h4,h5,h6,p{

			&:last-child{

				margin-bottom: 0;
			}
		}
	}
}

@mixin fitParent($all:"", $top:"", $right:"", $bottom:"", $left:""){
	position:absolute;
	@if $all != ""{
		top:$all;
		right:$all;
		bottom:$all;
		left:$all;
	} @else{
		@if $top != ""{
			top:$top;
			} @else{
			top:0;
		}

		@if $right != ""{
			right:$right;
			} @else{
			right:0;
		}

		@if $bottom != ""{
			bottom:$bottom;
			} @else{
			bottom:0;
		}

		@if $left != ""{
			left:$left;
			} @else{
			left:0;
		}
	}	
}

// ------------------------------------------------------

/// Generates styles for an absolutely positioned sidebar scaling to the
/// nearest relative parent's height.
/// Arguments allow you to specify the width and position of the sidebar.
/// @name sideBar
/// @param {Pixel value} width [300px] Width of the side-bar
/// @param {String} side ['left'] Side to position the side-bar. 'left' | 'right'
/// @example scss - Include
///  #side-bar{
///  
///  	@include sideBar(340px);
///  }
/// @example css - Output
///  #side-bar {
///    position: absolute;
///    top: 0;
///    bottom: 0;
///    width: 340px;
///    left: 0;
///  }
///

@mixin sideBar($width:300px,$side:"left"){

	position:absolute;
	top:0;
	bottom:0;
	width:$width;

	@if $side == "left"{
		left:0;
	}

	@if $side == "right"{
		right:0;
	}
}

@mixin sideBarAppend($width:300px,$side:"left"){

	position:absolute;
	top:0;
	bottom:0;

	@if $side == "left"{
		left:$width;
		right:0;
	}

	@if $side == "right"{
		right:$width;
		left:0;
	}
}

// ------------------------------------------------------
/// Centralises a fluid container element to its nearest relatively posisiotned parent. 
/// Can be used within an element with the fullscreen class.
/// @name centre
/// @param {String} axis ["both"] The axis to center the content on. 'both' | 'y' | 'x'
/// @example scss - Include
///  .centre{
///  	 @include centre;
///  }
/// @example css - Output
///  .centre {
///      position: absolute;
///      top: 50%;
///      left: 50%;
///      -webkit-transform: translate(-50%, -50%);
///      -moz-transform: translate(-50%, -50%);
///      -ms-transform: translate(-50%, -50%);
///      transform: translate(-50%, -50%);
///  }
///

@mixin centre($axis: "both"){
	position:absolute;
	@if $axis == "y"{
		top:50%;
		@include transforms("translateY(-50%)");
	}
	@if $axis == "x"{
		left:50%;
		@include transforms("translateX(-50%)");
	}
	@if $axis == "both"{
		top:50%;
		left:50%;
		@include transforms("translate(-50%, -50%)");
	}	
}

// ------------------------------------------------------
/// This mixin genrates 4 classes for centering elements or text. 
/// Can be used within an element with the fullscreen class.
/// @name centreClasses
/// @example scss - Include
///  @include centreClasses;
/// @example css - Output
///  .centre {
///    position: absolute;
///    top: 50%;
///    left: 50%;
///    -webkit-transform: translate(-50%, -50%);
///    -moz-transform: translate(-50%, -50%);
///    -ms-transform: translate(-50%, -50%);
///    transform: translate(-50%, -50%);
///  }
///  
///  .centre-x {
///    height: 100%;
///    position: absolute;
///    left: 50%;
///    -webkit-transform: translateX(-50%);
///    -moz-transform: translateX(-50%);
///    -ms-transform: translateX(-50%);
///    transform: translateX(-50%);
///  }
///  
///  .centre-y {
///    width: 100%;
///    position: absolute;
///    top: 50%;
///    -webkit-transform: translateY(-50%);
///    -moz-transform: translateY(-50%);
///    -ms-transform: translateY(-50%);
///    transform: translateY(-50%);
///  }
///  
///  .text-centre {
///    text-align: center;
///  }
///

@mixin centreClasses{

	.centre{
		@include centre;
	}

	.centre-x{

		height:100%;
		@include centre(x);
	}

	.centre-y{

		width:100%;
		@include centre(y);
	}

	.text-centre{

		text-align: center;
	}
}


// ------------------------------------------------------

/// A more symantic wrapper for handling breakpoints.
/// It takes a single argument for the size. This can be 
/// 'large' - 1420px, 'medium' - 1200px, 'small' - 760px or
/// a pixel value of your choosing.
/// @name breakPoint
/// @param {String / Pixel value} ize [] Breakpoint width - large | medium | small | pixel val
/// @example scss - Include
///  p{
///  
///  	font-size: 1.2em;
///  
///  	@include breakPoint(850px){
///  
///  		font-size: 1em;
///  	}
///  
///  	@include breakPoint(small){
///  
///  		font-size: 0.85em;
///  	}
///  }
///
/// @example css - Output
///  p {
///    font-size: 1.2em;
///  }
///  @media (max-width: 850px) {
///    p {
///      font-size: 1em;
///    }
///  }
///  @media (max-width: 760px) {
///    p {
///      font-size: 0.85em;
///    }
///  }
///  
///

@mixin breakPoint($ize){
	@if $ize == large {
		@media (max-width: 1420px) { @content; }
	}
	@else if $ize == medium {
		@media (max-width: 1200px) { @content; }
	}
	@else if $ize == small {
		@media (max-width: 760px) { @content; }
	} @else {
		@media (max-width: $ize) { @content; }
	}
}



// work in progress

@mixin linedTabs($borderCol:#bbb,$bgCol:#e9e9e9,$height:40px,$rounding:5px,$padding:20px){

	.tabs.lined{

		position: relative;

		.tab-links{

			text-align: center;

			li{

				display:inline-block;

				a{

					display: block;
					padding:5px 15px;
					color: contrast($bgCol,60%);
					cursor: pointer;
				}

				&.active a{

					background-color: $bgCol;
					border-left: 1px solid $borderCol;
					border-right: 1px solid $borderCol;
					border-top: 1px solid $borderCol;
					border-bottom: 1px solid $bgCol;

					@if $rounding {
						border-radius:$rounding $rounding 0 0;
					}
				}
			}
		}

		.tab{

			padding:$padding;
			width:100%;
			background-color: $bgCol;
			border: 1px solid $borderCol;
			margin-top: -1px;

			@if $rounding {
				border-radius:$rounding;
			}

			&.hide{

				opacity: 0;
			}
		}
	}
}
